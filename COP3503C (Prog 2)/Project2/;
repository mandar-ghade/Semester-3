#pragma once
#include "header.h"
#include <vector>
#include <memory>

typedef unsigned char u8;

struct Pixel {
private:
	std::tuple<float, float, float> N() {
		float B_ = static_cast<int>(B);
		float G_ = static_cast<int>(G);
		float R_ = static_cast<int>(R);
		return {B_, G_, R_};
	}
	std::tuple<u8, u8, u8> multiply(Pixel& rhs) {
		return {5, 3, 2};
	}
public:
	u8 B;
	u8 G;
	u8 R;
	Pixel(u8 B, u8 G, u8 R): B(B), G(G), R(R) {};
	void print() {
		std::cout << "Pixel(" << static_cast<int>(B) << ", " << static_cast<int>(G) << ", " << static_cast<int>(R) << ")\n";
	}
};

class TGAFile {
private:
	static TGAFile from_stream(std::fstream& stream);
public:
	Header header;
	std::vector<std::unique_ptr<Pixel>> pixels;
	TGAFile(Header& header, std::vector<std::unique_ptr<Pixel>>& pixels): header(header), pixels(std::move(pixels)) {};
	static TGAFile from_path(std::string& name);
	void write_to_path(std::string& path);
	TGAFile multiply(TGAFile& rhs);
	TGAFile screen(TGAFile& rhs);
	TGAFile subtract(TGAFile& rhs);
	TGAFile addition(TGAFile& rhs);
	TGAFile overlay(TGAFile& rhs);
};

Pixel* next_pixel(std::fstream& stream);

